{"version":3,"sources":["arraystorage.js"],"names":["Store","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","ReferenceError","count","counter","defaultConfig","location","hostname","formatRequest","request","IDBRequest","TypeError","promise","Promise","resolve","reject","onsuccess","event","target","result","onerror","error","validateCallback","callback","msg","log","Function","Error","option","config","id","databaseName","objectStoreName","currentPromise","catch","database","state","version","open","onupgradeneeded","db","store","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","onclose","onabort","close","onversionchange","catchPromise","openDB","then","IDBDatabase","prepare","ready","objectStore","transaction","clear","catched","getAll","primaryKey","primaryKeys","Array","errorMsg","forEach","key","Number","isSafeInteger","position","delete","datas","get","data","push","item","Object","add","put","successCallback","openCursor","bindRequestEvents","cursor","formatOpenCursorWithSuccessCallback","value","continue"],"mappings":"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","file":"arraystorage.map","sourceRoot":"..","sourcesContent":["\nconst indexedDB = window.indexedDB\n  || window.mozIndexedDB\n  || window.webkitIndexedDB\n  || window.msIndexedDB;\n\nif (!indexedDB) {\n  throw new ReferenceError('您的浏览器不支持indexeddb');\n}\n\n// 计数器\nlet count = 0;\nconst counter = () => {\n  count += 1;\n  return count;\n};\n\nconst defaultConfig = {\n  databaseName: window.location.hostname,\n  objectStoreName: 'store',\n};\n\nconst formatRequest = (request) => {\n  if (!(request instanceof IDBRequest)) { throw new TypeError(`${request}不是有效的IDBRequest`); }\n  const promise = new Promise((resolve, reject) => {\n    request.onsuccess = (event) => {\n      resolve(event.target.result);\n    };\n    request.onerror = (event) => {\n      reject(event.target.error);\n    };\n  });\n  return promise;\n};\n\nconst validateCallback = (callback, msg) => {\n  let log;\n  if (!callback || !(callback instanceof Function)) {\n    log = `${msg} 参数callback不能是${typeof callback}的${callback},只接受Function类型callback`;\n  }\n  if (log) { throw new Error(log); }\n  return true;\n};\n\nclass Store {\n  // indexeddb模仿Array的api 主键为primaryKey\n  constructor(option = {}) {\n    // 接受一个配置对象\n    // databaseName数据库名 默认window.location.hostname\n    // objectStoreName 数据库表名的 默认 `store${counter()}`\n    // currentPromise 执行链\n    const config = {};\n    config.id = counter();\n    config.databaseName = option.databaseName || defaultConfig.databaseName;\n    config.objectStoreName = option.objectStoreName || defaultConfig.objectStoreName;\n    if (config.id > 1) { config.databaseName = `${config.databaseName}${config.id}`; }\n    this.databaseName = config.databaseName;\n    this.objectStoreName = config.objectStoreName;\n    this.currentPromise = new Promise(resolve => resolve(1));\n    return this;\n  }\n\n  catchPromise(promise, msg) {\n    // 给Promise添加catch\n    if (!(promise instanceof Promise)) { throw new TypeError(`${promise}不是Promise实例对象`); }\n    if (msg && typeof msg !== 'string') { throw new TypeError(`Error message: ${msg} 不是字符串`); }\n    const result = promise.catch((error) => {\n      console.error(msg, this, error);\n      throw error;\n    });\n    // this.currentPormise // 执行链\n    // 返回currentPromise的ready在每个方法开头 结尾又被catchPromise抓取\n    this.currentPromise = result;\n    return result;\n  }\n\n  openDB() {\n    // 打开数据库 并为数据库绑定事件\n    let promise;\n    if (!this.database || this.database.state !== 'open' || this.database.version !== this.version) {\n      promise = new Promise((resolve, reject) => {\n        const request = indexedDB.open(this.databaseName, this.version);\n        request.onupgradeneeded = (event) => {\n          const db = event.target.result;\n          const store = this.objectStoreName;\n          if (!db.objectStoreNames.contains(store)) {\n            db.createObjectStore(store, { keyPath: 'primaryKey', autoIncrement: true });\n          }\n        };\n        request.onsuccess = (event) => {\n          const database = event.target.result;\n          database.onclose = () => {\n            database.state = 'closed';\n          };\n          database.onabort = () => {\n            database.close();\n          };\n          database.onversionchange = () => {\n            this.database = database;\n            this.version = database.version;\n          };\n          database.state = 'open';\n          this.database = database;\n          resolve(this.database);\n        };\n        request.onerror = (event) => {\n          reject(event.target.error);\n        };\n      });\n    } else {\n      promise = new Promise(() => this.database);\n    }\n    return this.catchPromise(promise, 'Store.openDB');\n  }\n\n  prepare() {\n    // 打开数据库 并保证数据库是 打开状态，且有objectStore\n    const promise = this.openDB()\n      .then((database) => {\n        // 防止database是关闭状态\n        let result = database;\n        if (database.state === 'closed') {\n          result = this.openDB();\n        }\n        return result;\n      })\n      .then((database) => {\n        // 防止database没有objectStore\n        let result = database;\n        const store = this.objectStoreName;\n        if (!database.objectStoreNames.contains(store)) {\n          this.version += 1;\n          result = this.openDB();\n        }\n        return result;\n      }).then(() => this.database);\n    return this.catchPromise(promise, 'Store.prepare');\n  }\n\n  ready() {\n    // 返回promise resolve已经准备好的数据库\n    const isPrepared = this.database instanceof IDBDatabase\n      && this.database.state === 'open'\n      && this.database.objectStoreNames.contains(this.objectStoreName);\n    const promise = (isPrepared)\n      ? this.currentPromise.then(() => this.database)\n      : this.prepare();\n    return this.catchPromise(promise, 'Store.ready');\n  }\n\n  objectStore() {\n    // 返回objectStore\n    const promise = this.ready()\n      .then((db) => {\n        const store = this.objectStoreName;\n        const transaction = db.transaction([store], 'readwrite');\n        const objectStore = transaction.objectStore(store);\n        return objectStore;\n      });\n    return this.catchPromise(promise, 'Store.objectStore');\n  }\n\n  clear() {\n    // 清空数据库\n    const promise = this.objectStore()\n      .then((objectStore) => {\n        const request = objectStore.clear();\n        return formatRequest(request);\n      });\n    const catched = this.catchPromise(promise, 'Store.clear');\n    return catched;\n  }\n\n  getAll() {\n    // 获取整个数据库\n    // 返回promise resolve(datas) datas是整个数据库组成的数组\n    const promise = this.objectStore()\n      .then((objectStore) => {\n        const request = objectStore.getAll();\n        return formatRequest(request);\n      });\n    const catched = this.catchPromise(promise, 'Store.getAll');\n    return catched;\n  }\n\n  remove(primaryKey) {\n    // 删除数据 remove(primaryKey) 和 remove([primaryKey1, primaryKey2])\n    // 返回promise resolve() primaryKeys是删除的数据的主键组成的数组\n    const primaryKeys = (primaryKey instanceof Array) ? primaryKey : [primaryKey];\n    let errorMsg;\n    const position = 'Store.remove';\n    primaryKeys.forEach((key) => {\n      if (!Number.isSafeInteger(key)) { errorMsg = `${position} primaryKey只接受Integer，不能是${key}`; }\n      if (errorMsg) { throw new Error(errorMsg); }\n    });\n    let store;\n    let promise = this.objectStore()\n      .then((objectStore) => {\n        store = objectStore;\n      });\n    primaryKeys.forEach((key) => {\n      promise = promise.then(() => {\n        const request = store.delete(key);\n        return formatRequest(request);\n      });\n    });\n    promise = promise.then(() => primaryKeys);\n    return this.catchPromise(promise, position);\n  }\n\n  get(primaryKey) {\n    // 取出指定id位置的数据 primaryKeyGet(primaryKey) 或 primaryKeyGet(primaryKeys)\n    // 返回promise resolve(datas) datas是结果组成的数组\n    const primaryKeys = (primaryKey instanceof Array) ? primaryKey : [primaryKey];\n    const datas = [];\n    let errorMsg;\n    const position = 'Store.get';\n    primaryKeys.forEach((key) => {\n      if (!Number.isSafeInteger(key)) { errorMsg = `${position} primaryKey只接受Integer，不能是${key}`; }\n      if (errorMsg) { throw new Error(errorMsg); }\n    });\n    let store;\n    let promise = this.objectStore()\n      .then((objectStore) => {\n        store = objectStore;\n      });\n    primaryKeys.forEach((key) => {\n      promise = promise.then(() => {\n        const request = store.get(key);\n        return formatRequest(request);\n      }).then((data) => {\n        datas.push(data);\n      });\n    });\n    promise = promise.then(() => datas);\n    return this.catchPromise(promise, position);\n  }\n\n  push(data) {\n    // 新增数据 push(data) 和 push([data1, data2])\n    // 返回promise resolve(primaryKeys) primaryKeys是添加的数据的主键组成的数组\n    let errorMsg;\n    const position = 'Store.push';\n    const datas = (data instanceof Array) ? data : [data];\n    const primaryKeys = [];\n    datas.forEach((item) => {\n      if (!(item instanceof Object)) { errorMsg = `${position} item只接受对象，不能是${item}`; }\n      if (item.primaryKey) {\n        errorMsg = `${position} data.primaryKey只接受null或undefiend，不能是${item.primaryKey}`;\n      }\n      if (errorMsg) { throw new Error(errorMsg); }\n    });\n    let store;\n    let promise = this.objectStore()\n      .then((objectStore) => {\n        store = objectStore;\n      });\n    datas.forEach((item) => {\n      promise = promise\n        .then(() => {\n          const request = store.add(item);\n          return formatRequest(request);\n        }).then((primaryKey) => {\n          primaryKeys.push(primaryKey);\n        });\n    });\n    promise = promise.then(() => primaryKeys);\n    return this.catchPromise(promise, position);\n  }\n\n  update(data) {\n    // 在指定位置新建或插入数据\n    // update(data) 或 update([data1, data2])\n    // 返回promise resolve(primaryKeys) primaryKeys是更新后的主键\n    // data应该有Integer类型的data.primaryKey\n    let errorMsg;\n    const position = 'Store.update';\n    const datas = (data instanceof Array) ? data : [data];\n    const primaryKeys = [];\n    datas.forEach((item) => {\n      if (!(item instanceof Object)) { errorMsg = `${position} data只接受对象，不能是${item}`; }\n      if (!item.primaryKey || !Number.isSafeInteger(item.primaryKey)) {\n        errorMsg = `${position} data.primaryKey只接受Integer，不能是${item.primaryKey}`;\n      }\n      if (errorMsg) { throw new Error(errorMsg); }\n    });\n    let store;\n    let promise = this.objectStore()\n      .then((objectStore) => {\n        store = objectStore;\n      });\n    datas.forEach((item) => {\n      promise = promise\n        .then(() => {\n          const request = store.put(item);\n          return formatRequest(request);\n        }).then((primaryKey) => {\n          primaryKeys.push(primaryKey);\n        });\n    });\n    promise = promise.then(() => primaryKeys);\n    return this.catchPromise(promise, position);\n  }\n\n  formatOpenCursorWithSuccessCallback(successCallback) {\n    // 标准化遍历数据库\n    // 返回promise\n    // 接受一个successCallback 若successCallback有除了undefined以外的返回值 则resolve\n    const position = 'Store.formatOpenCursorWithSuccessCallback';\n    validateCallback(successCallback, position);\n    const promise = this.objectStore()\n      .then((objectStore) => {\n        const request = objectStore.openCursor();\n        const bindRequestEvents = new Promise((resolve, reject) => {\n          // success callback\n          request.onsuccess = (event) => {\n            const cursor = event.target.result;\n            const result = successCallback(cursor);\n            if (result || !cursor) { resolve(result); }\n          };\n          request.onerror = (event) => {\n            reject(event.target.error);\n          };\n        });\n        return bindRequestEvents;\n      });\n    return this.catchPromise(promise, position);\n  }\n\n  find(callback) {\n    // 遍历数据库 返回数据库中满足提供的测试函数的第一个元素的值\n    // 返回promise resolve(data)\n    // 接受回调函数callback(value, primaryKey) => {}\n    // value是数据值，primaryKey是主键 若callback return ture 则返回value\n    const position = 'Store.find';\n    validateCallback(callback, position);\n    let result;\n    const successCallback = (cursor) => {\n      if (cursor) {\n        const isMatch = callback(cursor.value, cursor.primaryKey);\n        if (isMatch) {\n          result = cursor.value;\n        } else {\n          cursor.continue();\n        }\n      }\n      return result;\n    };\n    const promise = this.formatOpenCursorWithSuccessCallback(successCallback);\n    return this.catchPromise(promise, position);\n  }\n\n  filter(callback) {\n    // 遍历数据库 接受callback对数据库中所有数据进行筛选 返回符合条件的数据的数组\n    // 返回promise resolve(data)\n    // 接受回调函数callback(value, primaryKey) => {}\n    // value是数据值，primaryKey是主键\n    const position = 'Store.filter';\n    validateCallback(callback, position);\n    const result = [];\n    const successCallback = (cursor) => {\n      if (cursor) {\n        const isMatch = !!callback(cursor.value, cursor.primaryKey);\n        if (isMatch) { result.push(cursor.value); }\n        cursor.continue();\n      }\n    };\n    const promise = this.formatOpenCursorWithSuccessCallback(successCallback)\n      .then(() => result);\n    return this.catchPromise(promise, position);\n  }\n\n  map(callback) {\n    // 遍历数据库 对每条数据进行callback 返回结果的数组\n    // 返回promise resolve(data)\n    // 接受回调函数callback(value, primaryKey) => {}\n    // value是数据值，primaryKey是主键\n    const position = 'Store.map';\n    validateCallback(callback, position);\n    const result = [];\n    const successCallback = (cursor) => {\n      if (cursor) {\n        const item = callback(cursor.value, cursor.primaryKey);\n        result.push(item);\n        cursor.continue();\n      }\n    };\n    const promise = this.formatOpenCursorWithSuccessCallback(successCallback)\n      .then(() => result);\n    return this.catchPromise(promise, position);\n  }\n}\n\nexport default Store;\n"]}