{"version":3,"sources":["arraystorage.js","index.js"],"names":["Store","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","ReferenceError","count","counter","defaultConfig","location","hostname","formatRequest","request","IDBRequest","TypeError","promise","Promise","resolve","reject","onsuccess","event","target","result","onerror","error","validateCallback","callback","msg","log","Function","Error","option","new","config","id","databaseName","objectStoreName","currentPromise","getCurrentPromise","then","catch","open","version","onupgradeneeded","db","store","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","database","onclose","state","onabort","close","onversionchange","catched","isPrepared","openDB","err","IDBDatabase","transaction","objectStore","ready","getStore","clear","pushPromise","getAll","primaryKey","primaryKeys","Array","forEach","key","Number","isSafeInteger","position","delete","datas","get","data","push","item","Object","add","put","successCallback","openCursor","bindRequestEvents","cursor","formatOpenCursorWithSuccessCallback","value","continue","ArrayStorage","nameInput","document","querySelector","emailInput","primaryKeyInput","pushSubmit","updateSubmit","getAllSbumit","getSubmit","board","title","container","createElement","template","name","email","inner","innerHTML","onclick","remove","removeChild","appendChild","update","exist","replaceChild","alert","addEventListener"],"mappings":"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","file":"index.map","sourceRoot":"..","sourcesContent":["\nconst indexedDB = window.indexedDB\n  || window.mozIndexedDB\n  || window.webkitIndexedDB\n  || window.msIndexedDB;\n\nif (!indexedDB) {\n  throw new ReferenceError('您的浏览器不支持indexeddb');\n}\n\n// 计数器\nlet count = 0;\nconst counter = () => {\n  count += 1;\n  return count;\n};\n\nconst defaultConfig = {\n  databaseName: window.location.hostname,\n  objectStoreName: 'store',\n};\n\nconst formatRequest = (request) => {\n  if (!(request instanceof IDBRequest)) { throw new TypeError(`${request}不是有效的IDBRequest`); }\n  const promise = new Promise((resolve, reject) => {\n    request.onsuccess = (event) => {\n      resolve(event.target.result);\n    };\n    request.onerror = (event) => {\n      reject(event.target.error);\n    };\n  });\n  return promise;\n};\n\nconst validateCallback = (callback, msg) => {\n  let log;\n  if (!callback || !(callback instanceof Function)) {\n    log = `${msg} 参数callback不能是${typeof callback}的${callback},只接受Function类型callback`;\n  }\n  if (log) { throw new Error(log); }\n  return true;\n};\n\nclass Store {\n  // indexeddb模仿Array的api 主键为primaryKey\n  constructor(option = {}) {\n    // 接受一个配置对象\n    // databaseName数据库名 默认window.location.hostname\n    // objectStoreName 数据库表名的 默认 `store${counter()}`\n    // currentPromise 执行链\n    if (new.target !== Store) { throw new Error('必须使用 new 命令生成实例'); }\n    const config = {};\n    config.id = counter();\n    config.databaseName = option.databaseName || defaultConfig.databaseName;\n    config.objectStoreName = option.objectStoreName || defaultConfig.objectStoreName;\n    if (config.id > 1) { config.databaseName = `${config.databaseName}${config.id}`; }\n    this.databaseName = config.databaseName;\n    this.objectStoreName = config.objectStoreName;\n    return this;\n  }\n\n  pushPromise(promise, msg) {\n    // 给currentPromise添加promise\n    if (!(promise instanceof Promise)) { throw new TypeError(`${promise}不是Promise实例对象`); }\n    if (msg && typeof msg !== 'string') { throw new TypeError(`Error message: ${msg} 不是字符串`); }\n    this.currentPromise = this.getCurrentPromise()\n      .then(() => promise)\n      .catch((error) => {\n        console.error(msg, error, this);\n        throw error;\n      });\n    // this.currentPormise 执行链\n    // 返回currentPromise的ready在每个方法开头 结尾又被pushPromise抓取\n    return this.currentPromise;\n  }\n\n  openDB() {\n    // 打开数据库 并为数据库绑定事件\n    const open = new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.databaseName, this.version);\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        const store = this.objectStoreName;\n        if (!db.objectStoreNames.contains(store)) {\n          db.createObjectStore(store, { keyPath: 'primaryKey', autoIncrement: true });\n        }\n      };\n      request.onsuccess = (event) => {\n        const database = event.target.result;\n        database.onclose = () => {\n          database.state = 'closed';\n        };\n        database.onabort = () => {\n          database.close();\n        };\n        database.onversionchange = () => {\n          this.database = database;\n          this.version = database.version;\n        };\n        database.state = 'open';\n        this.database = database;\n        resolve(this.database);\n      };\n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n    const catched = open.catch((error) => {\n      console.error(`Store.openDB ${error}`);\n      this.version = this.database.version;\n      if (!this.database.objectStoreNames.contains(this.objectStoreName)) {\n        this.version += 1;\n      }\n      return open;\n    });\n    return catched;\n  }\n\n  ready() {\n    // 返回promise resolve已经准备好的数据库\n    const promise = (this.isPrepared())\n      ? Promise.resolve(this.database)\n      : this.openDB();\n    const catched = promise\n      .catch((err) => {\n        console.error(`Store.ready ${err}`);\n        throw err;\n      });\n    return catched;\n  }\n\n  isPrepared() {\n    // 返回数据库是否准备好\n    return this.database instanceof IDBDatabase\n      && this.database.state === 'open'\n      && this.database.objectStoreNames.contains(this.objectStoreName);\n  }\n\n  getStore() {\n    // 返回objectStore\n    if (!this.isPrepared()) { throw new ReferenceError('Store.getStore 数据库未准备好'); }\n    return this.database.transaction(['store'], 'readwrite').objectStore('store');\n  }\n\n  getCurrentPromise() {\n    // 返回this.currentPromise\n    if (!this.currentPromise || !this.isPrepared()) {\n      this.currentPromise = this.ready();\n    }\n    return this.currentPromise;\n  }\n\n  clear() {\n    // 清空数据库\n    const promise = this.ready()\n      .then(() => {\n        const request = this.getStore().clear();\n        return formatRequest(request);\n      });\n    return this.pushPromise(promise, 'Store.clear');\n  }\n\n  getAll() {\n    // 获取整个数据库\n    // 返回promise resolve(datas) datas是整个数据库组成的数组\n    const promise = this.ready()\n      .then(() => {\n        const request = this.getStore().getAll();\n        return formatRequest(request);\n      });\n    return this.pushPromise(promise, 'Store.getAll');\n  }\n\n  remove(primaryKey) {\n    // 删除数据 remove(primaryKey) 和 remove([primaryKey1, primaryKey2])\n    // 返回promise resolve() primaryKeys是删除的数据的主键组成的数组\n    const primaryKeys = (primaryKey instanceof Array) ? primaryKey : [primaryKey];\n    const position = 'Store.remove';\n    primaryKeys.forEach((key) => {\n      if (!Number.isSafeInteger(key)) { throw new TypeError(`${position} primaryKey只接受Integer，不能是${key}`); }\n    });\n    let promise = this.ready();\n    primaryKeys.forEach((key) => {\n      promise = promise.then(() => {\n        const request = this.getStore().delete(key);\n        return formatRequest(request);\n      });\n    });\n    promise = promise.then(() => primaryKeys);\n    return this.pushPromise(promise, position);\n  }\n\n  get(primaryKey) {\n    // 取出指定id位置的数据 primaryKeyGet(primaryKey) 或 primaryKeyGet(primaryKeys)\n    // 返回promise resolve(datas) datas是结果组成的数组\n    const primaryKeys = (primaryKey instanceof Array) ? primaryKey : [primaryKey];\n    const datas = [];\n    const position = 'Store.get';\n    primaryKeys.forEach((key) => {\n      if (!Number.isSafeInteger(key)) { throw new TypeError(`${position} primaryKey只接受Integer，不能是${key}`); }\n    });\n    let promise = this.ready();\n    primaryKeys.forEach((key) => {\n      promise = promise\n        .then(() => {\n          const request = this.getStore().get(key);\n          return formatRequest(request);\n        }).then((data) => {\n          datas.push(data);\n        });\n    });\n    promise = promise.then(() => datas);\n    return this.pushPromise(promise, position);\n  }\n\n  push(data) {\n    // 新增数据 push(data) 和 push([data1, data2])\n    // 返回promise resolve(primaryKeys) primaryKeys是添加的数据的主键组成的数组\n    const position = 'Store.push';\n    const datas = (data instanceof Array) ? data : [data];\n    const primaryKeys = [];\n    datas.forEach((item) => {\n      if (!(item instanceof Object)) { throw new TypeError(`${position} item只接受对象，不能是${item}`); }\n      if (item.primaryKey) {\n        throw new TypeError(`${position} data.primaryKey只接受null或undefiend，不能是${item.primaryKey}`);\n      }\n    });\n    let promise = this.ready();\n    datas.forEach((item) => {\n      promise = promise\n        .then(() => {\n          const request = this.getStore().add(item);\n          return formatRequest(request);\n        }).then((primaryKey) => {\n          primaryKeys.push(primaryKey);\n        });\n    });\n    promise = promise.then(() => primaryKeys);\n    return this.pushPromise(promise, position);\n  }\n\n  update(data) {\n    // 在指定位置新建或插入数据\n    // update(data) 或 update([data1, data2])\n    // 返回promise resolve(primaryKeys) primaryKeys是更新后的主键\n    // data应该有Integer类型的data.primaryKey\n    const position = 'Store.update';\n    const datas = (data instanceof Array) ? data : [data];\n    const primaryKeys = [];\n    datas.forEach((item) => {\n      if (!(item instanceof Object)) { throw new TypeError(`${position} data只接受对象，不能是${item}`); }\n      if (!item.primaryKey || !Number.isSafeInteger(item.primaryKey)) {\n        throw new TypeError(`${position} data.primaryKey只接受Integer，不能是${item.primaryKey}`);\n      }\n    });\n    let promise = this.ready();\n    datas.forEach((item) => {\n      promise = promise\n        .then(() => {\n          const request = this.getStore().put(item);\n          return formatRequest(request);\n        }).then((primaryKey) => {\n          primaryKeys.push(primaryKey);\n        });\n    });\n    promise = promise.then(() => primaryKeys);\n    return this.pushPromise(promise, position);\n  }\n\n  formatOpenCursorWithSuccessCallback(successCallback) {\n    // 标准化遍历数据库\n    // 返回promise\n    // 接受一个successCallback 若successCallback有除了undefined以外的返回值 则resolve\n    const position = 'Store.formatOpenCursorWithSuccessCallback';\n    validateCallback(successCallback, position);\n    const promise = this.ready()\n      .then(() => {\n        const request = this.getStore().openCursor();\n        const bindRequestEvents = new Promise((resolve, reject) => {\n          // success callback\n          request.onsuccess = (event) => {\n            const cursor = event.target.result;\n            const result = successCallback(cursor);\n            if (result || !cursor) { resolve(result); }\n          };\n          request.onerror = (event) => {\n            reject(event.target.error);\n          };\n        });\n        return bindRequestEvents;\n      });\n    return this.pushPromise(promise, position);\n  }\n\n  find(callback) {\n    // 遍历数据库 返回数据库中满足提供的测试函数的第一个元素的值\n    // 返回promise resolve(data)\n    // 接受回调函数callback(value, primaryKey) => {}\n    // value是数据值，primaryKey是主键 若callback return ture 则返回value\n    const position = 'Store.find';\n    validateCallback(callback, position);\n    let result;\n    const successCallback = (cursor) => {\n      if (cursor) {\n        const isMatch = callback(cursor.value, cursor.primaryKey);\n        if (isMatch) {\n          result = cursor.value;\n        } else {\n          cursor.continue();\n        }\n      }\n      return result;\n    };\n    const promise = this.formatOpenCursorWithSuccessCallback(successCallback);\n    return this.pushPromise(promise, position);\n  }\n\n  filter(callback) {\n    // 遍历数据库 接受callback对数据库中所有数据进行筛选 返回符合条件的数据的数组\n    // 返回promise resolve(data)\n    // 接受回调函数callback(value, primaryKey) => {}\n    // value是数据值，primaryKey是主键\n    const position = 'Store.filter';\n    validateCallback(callback, position);\n    const result = [];\n    const successCallback = (cursor) => {\n      if (cursor) {\n        const isMatch = !!callback(cursor.value, cursor.primaryKey);\n        if (isMatch) { result.push(cursor.value); }\n        cursor.continue();\n      }\n    };\n    const promise = this.formatOpenCursorWithSuccessCallback(successCallback)\n      .then(() => result);\n    return this.pushPromise(promise, position);\n  }\n\n  map(callback) {\n    // 遍历数据库 对每条数据进行callback 返回结果的数组\n    // 返回promise resolve(data)\n    // 接受回调函数callback(value, primaryKey) => {}\n    // value是数据值，primaryKey是主键\n    const position = 'Store.map';\n    validateCallback(callback, position);\n    const result = [];\n    const successCallback = (cursor) => {\n      if (cursor) {\n        const item = callback(cursor.value, cursor.primaryKey);\n        result.push(item);\n        cursor.continue();\n      }\n    };\n    const promise = this.formatOpenCursorWithSuccessCallback(successCallback)\n      .then(() => result);\n    return this.pushPromise(promise, position);\n  }\n}\n\nwindow.ArrayStorage = Store;\nexport default Store;\n","import Store from './arraystorage';\n\nconst store = new Store();\nconst nameInput = document.querySelector('#name');\nconst emailInput = document.querySelector('#email');\nconst primaryKeyInput = document.querySelector('#primaryKey');\nconst pushSubmit = document.querySelector('#push');\nconst updateSubmit = document.querySelector('#update');\nconst getAllSbumit = document.querySelector('#getAll');\nconst getSubmit = document.querySelector('#get');\nconst board = document.querySelector('#board');\nconst title = board.querySelector('*[name=title]');\n\n\nconst container = document.createElement('table');\n\nconst template = (primaryKey, name, email) => {\n  // td模板\n  return `<tr id='item${primaryKey}'><td>${primaryKey}</td><td>${name}</td><td>${email}</td><td><button name='remove' >删除</button></td></tr>`;\n};\n\n// Store.push\nconst push = (primaryKey, name, email) => {\n  // 添加数据并绑定删除事件\n  const inner = template(primaryKey, name, email);\n  container.innerHTML = inner;\n  const item = container.querySelector('tr');\n  const removeSubmit = item.querySelector('button[name=remove]');\n  removeSubmit.onclick = () => {\n    // 删除数据\n    // Store.remove\n    const promise = store.remove(primaryKey).then(() => {\n      board.removeChild(item);\n    });\n    // Store.remove\n    return promise;\n  };\n  board.appendChild(item);\n};\n\npushSubmit.onclick = () => {\n  // 新增数据\n  const name = nameInput.value;\n  const email = emailInput.value;\n  const data = { name, email };\n  store.push(data)\n    .then((primaryKey) => {\n      data.primaryKey = primaryKey;\n      push(data.primaryKey, data.name, data.email);\n    });\n};\n// Store.push\n// Store.update\nconst update = (primaryKey, name, email) => {\n  // 更新数据并绑定删除事件\n  const inner = template(primaryKey, name, email);\n  container.innerHTML = inner;\n  const item = container.querySelector('tr');\n  const removeSubmit = item.querySelector('button[name=remove]');\n  removeSubmit.onclick = () => {\n    // 删除数据\n    // Store.remove\n    const promise = store.remove(primaryKey).then(() => {\n      board.removeChild(item);\n    });\n    // Store.remove\n    return promise;\n  };\n  const exist = document.querySelector(`#item${primaryKey}`);\n  if (exist) {\n    board.replaceChild(item, exist);\n  } else {\n    board.appendChild(item);\n  }\n};\nupdateSubmit.onclick = () => {\n  // 更新数据\n  const name = nameInput.value;\n  const email = emailInput.value;\n  const primaryKey = Number(primaryKeyInput.value);\n  if (!Number.isSafeInteger(primaryKey)) {\n    return window.alert('更新需要primaryKey参数');\n  }\n  const data = { name, email, primaryKey };\n  const promise = store.update(data)\n    .then(() => {\n      update(data.primaryKey, data.name, data.email);\n    });\n  return promise;\n};\n// Store.update\n// Store.getAll\nconst getAll = () => {\n  // 取出全部数据库\n  const promise = store.getAll()\n    .then((datas) => {\n      board.innerHTML = '';\n      board.appendChild(title);\n      datas.forEach((data) => {\n        push(data.primaryKey, data.name, data.email);\n      });\n    }).then(() => {\n      console.log('数据库已经取出');\n    });\n  return promise;\n};\ngetAllSbumit.onclick = () => {\n  getAll();\n};\n// Store.getAll\n// Store.get\nconst get = (primaryKey) => {\n  const key = Number(primaryKey);\n  if (!Number.isSafeInteger(key)) {\n    window.alert(`主键不可能是${primaryKey}`);\n  }\n  const promise = store.get(key)\n    .then((datas) => {\n      const data = datas[0];\n      if (data) {\n        board.innerHTML = '';\n        board.appendChild(title);\n        push(data.primaryKey, data.name, data.email);\n      } else {\n        window.alert('未查询到任何结果');\n      }\n    })\n    .then(() => {\n      console.log('数据已取出');\n    });\n  return promise;\n};\ngetSubmit.onclick = () => {\n  const primaryKey = Number(primaryKeyInput.value);\n  get(primaryKey);\n};\n// Store.get\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // 页面加载\n  getAll();\n});\n\n// 增 push(data) push([data1,data2]) √√√\n// 删 remove(primaryKey) remove([key1, key2]) √√√\n// 改 update(data) √√√\n// 查找 直接主键获取 get(key) get([key1, key2]) √√√\n// 查找 单数查找find(callback) √√ 复数查找filter(callback) √√ 全部取出getAll √√√\n// 遍历数据库map(callback) √√\n\n// 数组型共计8个api\n"]}